module type X__3 = sig type t val eq : (t -> (t -> bool)) end module type X__4 = sig type elt type set val member : (elt -> (set -> bool)) end module type X__5 = sig type elt type set val member : (elt -> (set -> bool)) code end module type X__6 = sig type t val eq : (t -> (t -> bool)) code end module type X__7 = sig type t val eq : (t -> (t -> bool)) code end module type X__8 = sig type elt type set val member : (elt -> (set -> bool)) end module type EQ = X__3 module type S = X__4
let makeSet (type a)  = (fun (m: (module X__6 with type t = a)) -> (module struct module X__1 = (val m) type elt = X__1.t type set = (X__1.t list) let member   = (genlet .<let rec member  elt set = match set with
| (hd :: tl) -> (((.~(X__1.eq) elt) hd) || ((member elt) tl))
| _ -> false
 in member>.) end : X__5 with type elt = a and type set = (a list)));; let intset_cod   = (makeSet (module struct type t = int let eq   = (genlet .<(fun x -> (fun y -> (x = y)))>.) end : X__7 with type t = int));; let intset   = (module struct module X__2 = (val intset_cod) type elt = X__2.elt type set = X__2.set let member   = Runcode.run (X__2.member) end : X__8 with type elt = int and type set = (int list));;
